name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Define REPO_NAME
      run: |
        # Ottieni il nome del repository dalla variabile GITHUB_REPOSITORY e definisci REPO_NAME
        REPO_NAME=$(basename $GITHUB_REPOSITORY)
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Update and Upgrade Server
      run: |
        # Aggiorna e aggiorna il sistema operativo
        sudo apt update -y
        sudo apt upgrade -y
        sudo apt install -y virtualenv python3-venv python3-dev libpq-dev postgresql postgresql-contrib nginx curl

    - name: Create User
      run: |
        # Crea un nuovo utente con il nome specificato nei secrets
        USER_NAME=${{ secrets.USER_NAME }}
        sudo adduser $USER_NAME
        sudo usermod -aG sudo $USER_NAME

    - name: Activate Virtual Environment
      run: |
        # Attiva l'ambiente virtuale e installa dipendenze Python
        virtualenv env
        source env/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file
      run: |
        # Crea il file .env con le variabili segrete per Django
        echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo "DEBUG=True" >> .env
        echo "ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
        echo "DATABASE_NAME=${{ secrets.DJANGO_DB_NAME }}" >> .env
        echo "DATABASE_USER=${{ secrets.DJANGO_DB_USER }}" >> .env
        echo "DATABASE_PASS=${{ secrets.DJANGO_DB_PASS }}" >> .env
    
    - name: Create Database and User
      run: |
        # Crea il database e l'utente PostgreSQL
        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DJANGO_DB_NAME }};"
        sudo -u postgres psql -c "CREATE USER ${{ secrets.DJANGO_DB_USER }} WITH PASSWORD '${{ secrets.DJANGO_DB_PASS }}';"
        sudo -u postgres psql -c "ALTER ROLE ${{ secrets.DJANGO_DB_USER }} SET client_encoding TO 'utf8';"
        sudo -u postgres psql -c "ALTER ROLE ${{ secrets.DJANGO_DB_USER }} SET default_transaction_isolation TO 'read committed';"
        sudo -u postgres psql -c "ALTER ROLE ${{ secrets.DJANGO_DB_USER }} SET timezone TO 'UTC';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DJANGO_DB_NAME }} TO ${{ secrets.DJANGO_DB_USER }};"

    - name: Run Django Commands
      run: |
        # Esegui i comandi di gestione Django
        python manage.py makemigrations
        python manage.py migrate
        python manage.py createsuperuser
        python manage.py collectstatic --noinput
    
    - name: Configure Gunicorn
      run: |
        # Configura Gunicorn con il nome utente e il nome del repository
        sed -i "s/USER/${{ secrets.USER_NAME }}/" ./scripts/gunicorn/gunicorn.service
        sed -i "s/PROJECTDIR/$REPO_NAME/" ./scripts/gunicorn/gunicorn.service
        sudo cp ./scripts/gunicorn/gunicorn.socket /etc/systemd/system/
        sudo cp ./scripts/gunicorn/gunicorn.service /etc/systemd/system/
        sudo systemctl start gunicorn.socket
        sudo systemctl enable gunicorn.socket
        sudo systemctl daemon-reload
        sudo systemctl restart gunicorn
    
    - name: Configure Nginx
      run: |
        # Configura Nginx con l'indirizzo IP, il nome utente e il nome del repository
        ip_addr=$(curl -s ifconfig.co)
        sed -i "s/IP/$ip_addr/" ./scripts/nginx/conf.nginx
        sed -i "s/USER/${{ secrets.USER_NAME }}/" ./scripts/nginx/conf.nginx
        sed -i "s/PROJECTDIR/$REPO_NAME/" ./scripts/nginx/conf.nginx
        sudo cp ./scripts/nginx/conf.nginx /etc/nginx/sites-available/
        sudo ln -s /etc/nginx/sites-available/conf.nginx /etc/nginx/sites-enabled/
        sudo nginx -t
        sudo systemctl restart nginx
    
    - name: Fix Firewall
      run: |
        # Correggi le regole del firewall
        sudo ufw delete allow 8000
        sudo ufw allow 'Nginx Full'
    
    - name: Final Checks
      run: |
        # Esegui gli ultimi controlli
        sudo systemctl status gunicorn.socket
        sudo systemctl status gunicorn
        sudo systemctl status nginx
