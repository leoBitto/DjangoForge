## Progetto: Arnia

**Obiettivo**: Creare un'applicazione per gestire le finanze personali in modo simile a una gestione aziendale, sfruttando Django e DjangoForge come template.

#### Struttura dell'applicazione "transactions"

L'app è attualmente strutturata come segue:
```
src/transactions/
├── admin.py
├── apps.py
├── docs
│   ├── assets
│   │   └── img
│   │       ├── transaction_icon.png
│   │       └── transaction_logo.png
│   ├── _config.yml
│   └── README.md
├── forms.py
├── __init__.py
├── migrations
│   ├── 0001_initial.py
│   └── __init__.py
├── models
│   └── base.py
├── __pycache__
├── templates
│   └── transactions
│       ├── bank_detail.html
│       ├── cash_detail.html
│       ├── create_portfolio.html
│       ├── overview.html
│       ├── portfolio.html
│       ├── recurring_transaction.html
│       └── transactions.html
├── tests.py
├── urls.py
└── views
    └── base.py
```

#### Modelli (models/base.py)

I principali modelli utilizzati includono:
- **FundBase**: Classe astratta per fondi, con campi per bilancio, data di inizio e fine.
- **BankAccount**: Estensione di FundBase, con tipo di conto e tasso d'interesse.
- **Cash**: Estensione di FundBase per gestire contante.
- **FundLog**: Per tracciare i cambiamenti nei fondi.
- **Transaction**: Modello generico per transazioni, con relazioni a conti e categorie.
- **IncomeCategory/ExpenseCategory**: Categorie per entrate e uscite.

#### Critiche e Suggerimenti

1. **Struttura delle Cartelle**:
   - Considerare la creazione di file separati per ciascun modello per migliorare la leggibilità e la manutenzione.
   - Rinomina i file nella cartella *docs* per riflettere meglio il contenuto.

2. **Modelli**:
   - **FundBase**: Considerare un campo `is_active` al posto di `end_date`.
   - **BankAccount**: Rinomina `ACCOUNT_TYPES` in `ACCOUNT_TYPE_CHOICES`.
   - **Transaction**: Aggiungere un campo `transaction_type` per distinguere tra entrate e uscite.
   - **IncomeCategory/ExpenseCategory**: Unire in un modello unico, ad esempio `TransactionCategory`.

---

### Contesto di DjangoForge

**DjangoForge** è un ecosistema modulare progettato per piccole e medie imprese (PMI), sviluppato con il framework Django. La piattaforma è concepita per fornire soluzioni software personalizzabili e scalabili, facilitando la gestione delle operazioni aziendali quotidiane e supportando vari moduli funzionali.

#### Struttura dell'Ecosistema

DjangoForge è organizzato in tre livelli principali:

1. **Progetto Base**: Include le funzionalità essenziali necessarie per tutte le applicazioni, garantendo un'infrastruttura solida e coerente.

2. **Tier 1**: Comprende applicazioni aziendali generiche come CRM e ERP, utilizzabili da una vasta gamma di aziende in vari settori.

3. **Tier 2**: Si concentra su applicazioni specifiche per settori, estendendo le funzionalità delle app di Tier 1 con caratteristiche personalizzate per soddisfare esigenze particolari.

#### Tecnologie Utilizzate

- **Framework**: Django, per un rapido sviluppo web e una gestione robusta dei dati.
- **Database**: PostgreSQL, scelto per la sua affidabilità e scalabilità.
- **Containerizzazione**: Docker e Docker Compose, per un facile deployment e gestione delle dipendenze.
- **CI/CD**: GitHub Actions, per automatizzare il processo di integrazione e distribuzione continua.

#### Scopo e Benefici

DjangoForge mira a semplificare lo sviluppo di applicazioni per le PMI, fornendo:
- **Modularità**: Le aziende possono scegliere e personalizzare i moduli in base alle loro necessità.
- **Scalabilità**: Le soluzioni possono crescere con l'azienda, aggiungendo nuove funzionalità man mano che le esigenze cambiano.
- **Accessibilità**: Permette anche alle piccole aziende di accedere a strumenti avanzati senza la necessità di investimenti enormi in infrastrutture IT.
